version: '3'
services:
  dockerhost: 
    privileged: true
    image: docker:dind
    environment: 
      DOCKER_TLS_CERTDIR: /certs
    volumes:
    - DockerCerts:/certs
  openssl:
    image: patsys/openssl
    environment:
      SCRIPT: |
        #!/bin/sh
        set -o pipefail
        set -e
        user=appuser
        group=appuser
        uid=1001
        gid=1001
        addgroup -g $$gid $$group && adduser -D -u $$uid  $$user -G $$group
        
        # Servercert
        cd /certs/Auth
        if [ ! -f ca.crt ]; then
          openssl req -nodes -newkey rsa:4096 -keyform PEM -keyout ca.key -x509 -days 3650 -outform PEM -out ca.crt -subj "/C=DE/ST=OverTheAir/L=Springfield/O=Dreams/CN=CAServer"
          openssl genrsa -out server_key.pem 4096
          openssl req  -new -key server_key.pem -out server.req -subj  "/C=DE/ST=OverTheAir/L=Springfield/O=Dreams/CN=authserver"
          cp /etc/ssl/openssl.cnf /tmp/openssl.cnf && cat /etc/ssl/openssl.cnf && echo -e "\n[SAN]\nsubjectAltName=DNS:authserver" >> /tmp/openssl.cnf
          openssl x509 -req -in server.req -CA ca.crt -CAkey ca.key -set_serial 100 -extensions server -extensions SAN -days 1460 -outform PEM -out server_cert.pem -extfile /tmp/openssl.cnf
        fi
        cd /certs/Config
        if [ ! -f ca.crt ]; then
          openssl req -nodes -newkey rsa:4096 -keyform PEM -keyout ca.key -x509 -days 3650 -outform PEM -out ca.crt -subj "/C=DE/ST=OverTheAir/L=Springfield/O=Dreams/CN=CAServer"
          openssl genrsa -out server_key.pem 4096
          openssl req  -new -key server_key.pem -out server.req -subj  "/C=DE/ST=OverTheAir/L=Springfield/O=Dreams/CN=configserver"
          cp /etc/ssl/openssl.cnf /tmp/openssl.cnf && cat /etc/ssl/openssl.cnf && echo -e "\n[SAN]\nsubjectAltName=DNS:configserver" >> /tmp/openssl.cnf
          openssl x509 -req -in server.req -CA ca.crt -CAkey ca.key -set_serial 100 -extensions server -extensions SAN -days 1460 -outform PEM -out server_cert.pem -extfile /tmp/openssl.cnf
        fi
        # Clientcert 1
        cd /certs/Cert1
        if [ ! -f ca.crt ]; then
          openssl req -nodes -newkey rsa:4096 -keyform PEM -keyout ca.key -x509 -days 3650 -outform PEM -out ca.crt  -subj "/C=DE/ST=OverTheAir/L=Springfield/O=Dreams/CN=CACart1"
          openssl genrsa -out client.key 4096
          openssl req -new -key client.key -out client.req -subj "/C=DE/ST=OverTheAir/L=Springfield/O=Dreams/CN=ClientCart1"
          openssl x509 -req -in client.req -CA ca.crt -CAkey ca.key -set_serial 101 -extensions client -days 365 -outform PEM -out client.crt
        fi
        # Clientcert 2
        cd /certs/Cert2
        if [ ! -f ca.crt ]; then
          openssl req -nodes -newkey rsa:4096 -keyform PEM -keyout ca.key -x509 -days 3650 -outform PEM -out ca.crt  -subj "/C=DE/ST=OverTheAir/L=Springfield/O=Dreams/CN=CACart2"
          openssl genrsa -out client.key 4096
          openssl req -new -key client.key -out client.req -subj "/C=DE/ST=OverTheAir/L=Springfield/O=Dreams/CN=ClientCart2"
          openssl x509 -req -in client.req -CA ca.crt -CAkey ca.key -set_serial 101 -extensions client -days 365 -outform PEM -out client.crt
        fi
        chown -R $$uid:$$gid /certs/
    volumes:
    - Cert1:/certs/Cert1
    - Cert2:/certs/Cert2
    - AuthCert:/certs/Auth
    - ConfigCert:/certs/Config
  authserver:
    image: $IMAGEPREFIX$AUTHSERVER_IMAGE_NAME$DOCKER_TAG
    environment:
      PRE_SCRIPT: |
        #!/bin/sh
        for i in `seq 10` ; do
          if [ `find /example -name "*.crt" -type f | wc -w` -ge 3 ]; then
            break
          fi
          sleep 1
        done
        sed 's|example/|/example/|g' /example/config.yml >/tmp/config.yml
    command: ["-config","/tmp/config.yml"]
    depends_on:
    - openssl
    volumes:
    - ./authServer/example:/example
    - Cert1:/example/clientCert1
    - Cert2:/example/clientCert2
    - AuthCert:/example/server
  addcert:
    image: evoila/concourse-alg
    command: 
    - /bin/bash
    - -c
    - |
        for i in `seq 10` ; do
          if [ `find /cert -name "*.pem" -type f | wc -w` -ge 9 ]; then
            break
          fi
          sleep 1
        done
        cp /example/config.yml /conf
        yq --rawfile cacert /cert/server/ca.pem --rawfile key /cert/client/key.pem --rawfile cert /cert/client/cert.pem  -Yi '.properties.docker.config.docker.connection.cert=$$cert,.properties.docker.config.docker.connect.cert=$$key,.properties.docker.config.docker.connection.cacert=$$cacert' /conf/config.yml
    depends_on:
    - dockerhost
    volumes:
    - DockerCerts:/cert
    - ConfigConfig:/conf
    - ./configServer/example:/example
  configserver:
    image: $IMAGEPREFIX$CONFIGSERVER_IMAGE_NAME$DOCKER_TAG
    environment:
      PRE_SCRIPT: |
        #!/bin/sh
        for i in `seq 10` ; do
          if [ -f /conf/config.yml ]; then
            break
          fi
          sleep 1
        done
        for i in `seq 10` ; do
          if [ `find /example -name "*.crt" -type f | wc -w` -ge 3 ]; then
            break
          fi
          sleep 1
        done
        sed 's|example/|/example/|g' /conf/config.yml >/tmp/config.yml
    command: ["-config","/tmp/config.yml"]
    depends_on:
    - openssl
    - dockerhost
    - addcert
    volumes:
    - ConfigConfig:/conf
    - ./configServer/example:/example
    - Cert1:/example/clientCert1
    - Cert2:/example/clientCert2
    - ConfigCert:/example/server
    - DockerCerts:/example/docker
  prepareproject:
    image: alpine
    entrypoint:
    - /bin/sh
    - -c
    - |
        user=appuser
        group=appuser
        uid=1001
        gid=1001
        addgroup -g $$gid $$group && adduser -D -u $$uid  $$user -G $$group
        cp -R /example/* /project/example
        rm -rf /project/example/example/ssh_host_*
        chown -R $$uid:$$gid /project/example
    volumes:
    - .:/example
    - ProjectDir:/project/example

  containerssh:
    image: $IMAGEPREFIX$CONTAINERSSH_IMAGE_NAME$DOCKER_TAG
    environment:
      PRE_SCRIPT: |
        #!/bin/sh
        set -e
        for i in `seq 60` ; do
          if nc -zvw1 configserver 8080 ; then
            break
          fi
          sleep 1
        done
        for i in `seq 60` ; do
          if nc -zvw1 authserver 8081 ; then
            break
          fi
          sleep 1
        done
        for i in `seq 60` ; do
          if [ -d /example/example/config.yml ] ; then
            break
          fi
          sleep 1
        done

        ssh-keygen -q -N "" -t dsa -f /example/example/ssh_host_dsa_key
        ssh-keygen -q -N "" -t rsa -b 4096 -f /example/example/ssh_host_rsa_key
        ssh-keygen -q -N "" -t ecdsa -f /example/example/ssh_host_ecdsa_key
        ssh-keygen -q -N "" -t ed25519 -f /example/example/ssh_host_ed25519_key
        sed -i 's|authServer/|/example/authServer/|g' /example/example/config.yml
        sed -i 's|configServer/|/example/configServer/|g' /example/example/config.yml
        sed -i 's|example/ssh_host_|/example/example/ssh_host_|g' /example/example/config.yml
    command: ["-config","/example/example/config.yml"]
    links:
    - configserver
    - authserver
    - dockerhost:docker
    depends_on:
    - openssl
    - configserver
    - authserver
    - dockerhost
    - prepareproject
    volumes:
    - ProjectDir:/example
    - Cert1:/example/configServer/example/clientCert1
    - Cert1:/example/authServer/example/clientCert1
    - AuthCert:/example/authServer/example/server
    - ConfigCert:/example/configServer/example/server/
  kind:
    privileged: true
    image: docker:dind
    environment:
      DOCKER_TLS_CERTDIR: /docker/certs
      DOCKER_HOST: tcp://docker:2376
      DOCKER_TLS_VERIFY: "true"
      DOCKER_CERT_PATH: /docker/certs/client
    entrypoint:
    - /bin/sh
    - -c
    - |
      set -e
      set -o pipefail
      apk add --no-cache curl
      curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.10.0/kind-linux-amd64
      for i in `seq 60` ; do
        if nc -zvw1 docker 2376 ; then
          break
        fi
        sleep 1
      done
      for i in `seq 300` ; do
        if [ -f /docker/certs/client/ca.pem ]; then
          break
        fi
        sleep 1
      done
      chmod +x ./kind
      ./kind create cluster --wait 60m
    links:
    - dockerhost:docker
    depends_on:
    - dockerhost
    volumes:
    - DockerCerts:/docker/certs:ro 
  sut:
    image: alpine
    entrypoint:
    - /bin/sh
    - -c
    - |
      set -e
      sleep 300
      set -o pipefail
      apk add --no-cache openssh-client sshpass
      for i in `seq 150` ; do
        if nc -zvw1 containerssh 8222; then
          break
        fi
        sleep 1
      done
      mkdir -p ~/.ssh
      ip=`nslookup containerssh | grep Address | awk 'FNR==2{print $$2}'`
      ssh-keyscan -p 8222 -H $$ip > ~/.ssh/known_hosts
      sshpass -p test ssh -o StrictHostKeyChecking=no user2@containerssh -p 8222 echo connect
#      ssh -o StrictHostKeyChecking=no user2@containerssh -p 8222 -i /example/authServer/example/id_rsa echo connect
    links:
    - containerssh
    depends_on:
    - containerssh
    volumes:
    - .:/example
volumes:
  Cert1: {}
  Cert2: {}
  AuthCert: {}
  ConfigCert: {}
  DockerCerts: {}
  ConfigConfig: {}
  ProjectDir: {}
